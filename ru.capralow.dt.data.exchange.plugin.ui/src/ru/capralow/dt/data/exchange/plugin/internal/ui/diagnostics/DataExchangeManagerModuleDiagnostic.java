package ru.capralow.dt.data.exchange.plugin.internal.ui.diagnostics;

import org.eclipse.emf.ecore.EObject;

import com._1c.g5.v8.dt.bsl.validation.CustomValidationMessageAcceptor;
import com._1c.g5.v8.dt.metadata.mdclass.Configuration;

/*
ПланыОбменаПодсистемы = Новый Массив;
ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПолучитьПланыОбмена(ПланыОбменаПодсистемы);

Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
	
	ИмяПланаОбмена = ПланОбмена.Имя;
	
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = ПланОбмена;
	ПараметрыПроверки.ТипМодуля         = "МодульМенеджера";
	
	ПараметрыПроверки.СтрокаКода = ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена);
	ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Истина;
	ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Ложь;
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.СтрокаКода = ЛишниеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена);
	ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Ложь;
	ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Истина;
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	// Проверка наличия алгоритмов, объявленных в настройках плана обмена.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
		Попытка
			НастройкиПланаОбмена = МодульОбменДаннымиПовтИсп.НастройкиПланаОбмена(ИмяПланаОбмена);
		Исключение
			// Ошибка не выводится. Отсутствие процедуры ПриПолученииНастроек проверяется другими средствами.
			НастройкиПланаОбмена = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если НастройкиПланаОбмена <> Неопределено Тогда
		ПроцедурыПроверкиНаличия = Новый Массив;
		ПроцедурыПроверкиОтсутствия = Новый Массив;

		Для Каждого Алгоритм Из НастройкиПланаОбмена.Алгоритмы Цикл
			Если Алгоритм.Значение Тогда
				ПроцедурыПроверкиНаличия.Добавить("" + Алгоритм.Ключ + "(");
			Иначе
				ПроцедурыПроверкиОтсутствия.Добавить("" + Алгоритм.Ключ + "(");
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыПроверки.ЭтоОпциональныйАлгоритм = Истина;
		
		ПараметрыПроверки.СтрокаКода = ПроцедурыПроверкиОтсутствия;
		ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Ложь;
		ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Истина;
		ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
		
		ПараметрыПроверки.СтрокаКода = ПроцедурыПроверкиНаличия;
		ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Истина;
		ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Ложь;
		ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
		
	КонецЕсли;
	
КонецЦикла;
*/

public class DataExchangeManagerModuleDiagnostic implements BslDiagnostic {

	public static void analyze(EObject deltaObject, Configuration configuration) {
		// TODO Автоматически созданная заглушка метода

	}

	public static boolean needValidation(EObject object) {
		return false;
	}

	public static void validate(EObject object, CustomValidationMessageAcceptor messageAcceptor) {
		// TODO Автоматически созданная заглушка метода

	}

	private DataExchangeManagerModuleDiagnostic() {
		throw new IllegalStateException(Messages.BslDiagnostic_InternalClass);
	}
}
