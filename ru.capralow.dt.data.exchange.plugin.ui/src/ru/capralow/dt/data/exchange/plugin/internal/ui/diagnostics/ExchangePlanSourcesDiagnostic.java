package ru.capralow.dt.data.exchange.plugin.internal.ui.diagnostics;

import org.eclipse.emf.ecore.EObject;

import com._1c.g5.v8.dt.bsl.validation.CustomValidationMessageAcceptor;
import com._1c.g5.v8.dt.metadata.mdclass.Configuration;

/*
// Получение списка всех объектов метаданных БСП, содержащих данные.
ДопустимыеМетаданные = Новый Массив;
ДопустимыеМетаданные.Добавить(Метаданные.Константы);
ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
ДопустимыеМетаданные.Добавить(Метаданные.Документы);
ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовХарактеристик);
ДопустимыеМетаданные.Добавить(Метаданные.ПланыСчетов);
ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовРасчета);
ДопустимыеМетаданные.Добавить(Метаданные.РегистрыСведений);
ДопустимыеМетаданные.Добавить(Метаданные.РегистрыНакопления);
ДопустимыеМетаданные.Добавить(Метаданные.РегистрыБухгалтерии);
ДопустимыеМетаданные.Добавить(Метаданные.РегистрыРасчета);
ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
ДопустимыеМетаданные.Добавить(Метаданные.Задачи);

ВсеОбъектыМетаданных = Новый Массив;
Для Каждого Подсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
	Если Подсистема.Подсистемы.Количество() > 0 Тогда
		Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
			ДобавитьОбъектыПодсистемы(ПодчиненнаяПодсистема, ВсеОбъектыМетаданных);
		КонецЦикла;
	КонецЕсли;
	ДобавитьОбъектыПодсистемы(Подсистема, ВсеОбъектыМетаданных);
КонецЦикла;

ОбъектыИсключенияПланаОбменаЛюбогоРИБ = ОбъектыИсключенияПланаОбменаЛюбогоРИБ(); // Полный, СФильтрами (в т.ч. АРМ)

ДополнительныеОбъектыИсключенияПланаОбменаРИБПолный    = ДополнительныеОбъектыИсключенияПланаОбменаРИБПолный(); // Только Полный (в т.ч. АРМ)
ДополнительныеОбъектыИсключенияПланаОбменаРИБСФильтром = ДополнительныеОбъектыИсключенияПланаОбменаРИБСФильтром(); // Только СФильтрами (в т.ч. АРМ)
ДополнительныеОбъектыИсключенияПланаОбменаАРМ          = ДополнительныеОбъектыИсключенияПланаОбменаАРМ(); // Только АРМ (Полный или СФильтрами)

ОбъектыТолькоДляНачальногоОбразаЛюбогоРИБ = ОбъектыТолькоДляНачальногоОбразаЛюбогоРИБ(); // Полный, СФильтрами (в т.ч. АРМ)

ДополнительныеОбъектыТолькоДляНачальногоОбразаРИБПолный    = ДополнительныеОбъектыТолькоДляНачальногоОбразаРИБПолный(); // Только Полный (в т.ч. АРМ)
ДополнительныеОбъектыТолькоДляНачальногоОбразаРИБСФильтром = ДополнительныеОбъектыТолькоДляНачальногоОбразаРИБСФильтром(); // Только СФильтрами (в т.ч. АРМ)
ДополнительныеОбъектыТолькоДляНачальногоОбразаАРМ          = ДополнительныеОбъектыТолькоДляНачальногоОбразаАРМ(); // Только АРМ (Полный или СФильтрами)

ОбъектыВариативноВключаемыеВРИБ = ОбъектыВариативноВключаемыеВРИБ(); // Исключаются из проверки состава плана обмена и подписок.

ПланыОбменаПодсистемы = Новый Массив;
ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПолучитьПланыОбмена(ПланыОбменаПодсистемы);

Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
	
	// Получение состав плана обмена, проверка авторегистрации.
	СоставПланаОбмена = Новый Массив;
	Для Каждого ОбъектПланаОбмена Из ПланОбмена.Состав Цикл
		Если ЭтоОбъектБСП(ОбъектПланаОбмена.Метаданные) Тогда
			СоставПланаОбмена.Добавить(ОбъектПланаОбмена.Метаданные);
		КонецЕсли;
		Если ОбъектПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1, входящего в состав плана обмена %2 включена авторегистрация.
				|Все элементы состава плана обмена должны иметь признак авторегистрации Запретить.'"),
				ОбъектПланаОбмена.Метаданные.ПолноеИмя(), ПланОбмена.Имя);
			ДобавитьОшибку(ОбъектПланаОбмена.Метаданные, НСтр("ru = 'Некорректное использование признака авторегистрации'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Получение состава подписок планов обмена.
	ИмяПланаОбмена = ПланОбмена.Имя;
	СоставПодписок = СоставПодписок(ИмяПланаОбмена);
	СоставПодписокРегистрацияИзменения = СоставПодписок.РегистрацияИзменения;
	
	Если ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
		// Проверка состава плана обмена.
		ОбъектыИсключенияПланаОбмена = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектыИсключенияПланаОбменаЛюбогоРИБ);
		
		НазначениеПланаОбмена = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер").НазначениеПланаОбмена(ИмяПланаОбмена);
		ЭтоПланОбменаРИБСФильтром = ?(ВРег(НазначениеПланаОбмена) = "РИБСФИЛЬТРОМ", Истина, Ложь);
		
		ЭтоПланОбменаАРМ = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер").ЭтоРазделенныйПланОбменаБСП(ИмяПланаОбмена)
			И ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланОбменаИспользуетсяВМоделиСервиса(ИмяПланаОбмена);
			
		Если ЭтоПланОбменаРИБСФильтром Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИсключенияПланаОбмена, ДополнительныеОбъектыИсключенияПланаОбменаРИБСФильтром, Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИсключенияПланаОбмена, ДополнительныеОбъектыИсключенияПланаОбменаРИБПолный, Истина);
		КонецЕсли;
		
		Если ЭтоПланОбменаАРМ Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИсключенияПланаОбмена, ДополнительныеОбъектыИсключенияПланаОбменаАРМ, Истина);
		КонецЕсли;
		
		ПлановыйСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеОбъектыМетаданных, ОбъектыИсключенияПланаОбмена);
		ПлановыйСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПлановыйСостав, ОбъектыВариативноВключаемыеВРИБ);
		ФактическийСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СоставПланаОбмена, ОбъектыВариативноВключаемыеВРИБ);
		
		ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
		
		// Проверка состава подписок
		ОбъектыИспользуемыеТолькоДляНачальногоОбраза = ОбщегоНазначения.СкопироватьРекурсивно(
			ОбъектыТолькоДляНачальногоОбразаЛюбогоРИБ);
			
		Если ЭтоПланОбменаРИБСФильтром Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИспользуемыеТолькоДляНачальногоОбраза, ДополнительныеОбъектыТолькоДляНачальногоОбразаРИБСФильтром, Истина);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИспользуемыеТолькоДляНачальногоОбраза, ДополнительныеОбъектыТолькоДляНачальногоОбразаРИБПолный, Истина);
		КонецЕсли;
		
		Если ЭтоПланОбменаАРМ Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИспользуемыеТолькоДляНачальногоОбраза, ДополнительныеОбъектыТолькоДляНачальногоОбразаАРМ, Истина);
		КонецЕсли;
		
		ПлановыйСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПлановыйСостав, ОбъектыИспользуемыеТолькоДляНачальногоОбраза);
		ФактическийСостав = ИсключитьВариативныеОбъекты(СоставПодписокРегистрацияИзменения, ОбъектыВариативноВключаемыеВРИБ);
		ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
	КонецЕсли;
	
КонецЦикла;
*/

public class ExchangePlanSourcesDiagnostic implements BslDiagnostic {

	public static void analyze(EObject deltaObject, Configuration configuration) {
		// TODO Автоматически созданная заглушка метода

	}

	public static boolean needValidation(EObject object) {
		return false;
	}

	public static void validate(EObject object, CustomValidationMessageAcceptor messageAcceptor) {
		// TODO Автоматически созданная заглушка метода

	}

	private ExchangePlanSourcesDiagnostic() {
		throw new IllegalStateException(Messages.BslDiagnostic_InternalClass);
	}
}
